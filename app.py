import telebot
from telebot import types
from urllib.parse import quote

from dotenv import load_dotenv

import os
import threading
import re


class User:
    def __init__(self, chat_id, groups=None, contact=None):
        self.chat_id = chat_id
        self.groups = groups if groups else ["news"]
        self.contact = contact
        self.consultation_requests = []  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤


class Admin(User):
    def __init__(self, chat_id, password):
        super().__init__(chat_id)
        self.password = password
        self.publish_mode = False
        self.pending_message = None

class SuperAdmin(Admin):
    def __init__(self, chat_id):
        super().__init__(chat_id, None)


class BotManager:
    def __init__(self, token, admin_password, superadmin_password, group_chat_id):
        self.bot = telebot.TeleBot(token)
        self.admin_password = admin_password
        self.superadmin_password = superadmin_password
        self.admins = {}
        self.superadmins = {}
        self.subscribers = {}
        self.groups = {"news": "–ù–æ–≤–æ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"}
        self.group_chat_id = group_chat_id  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≥—Ä—É–ø–ø—ã
        self.publish_timeout = 15 * 60 # 15 minutes in seconds
        self.timers = {}

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.bot.message_handler(commands=['start'])(self.start)
        self.bot.message_handler(commands=['admin'])(self.admin_login)
        self.bot.message_handler(commands=['superadmin'])(self.superadmin_login)
        self.bot.message_handler(commands=['publish'])(self.enter_publish_mode)
        self.bot.message_handler(commands=['stop'])(self.exit_publish_mode)
        self.bot.message_handler(commands=['help'])(self.help_command)
        self.bot.message_handler(commands=['create_group'])(self.create_group)
        self.bot.message_handler(commands=['home'])(self.home)
        self.bot.message_handler(commands=['consultation'])(self.request_consultation)
        self.bot.message_handler(func=lambda message: True)(self.handle_message)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith("select_group_"))(self.handle_group_selection)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith("subscribe_"))(self.handle_subscription)
        self.bot.callback_query_handler(func=lambda call: call.data in ["confirm_send", "edit_message", "cancel_message"])(self.handle_confirmation)

    def start(self, message):
        chat_id = message.chat.id

        # –ê–≤—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä –≥—Ä—É–ø–ø—ã –≤ URL
        params = message.text.split()
        if len(params) > 1 and params[1] in self.groups:
            group = params[1]
            self.subscribers[chat_id] = User(chat_id, [group, "news"])
            self.bot.send_message(chat_id, f"""
            –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É '{self.groups[group]}'
            –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ñ–∏–≤—ã—Ö –ü—Ä–æ–µ–∫—Ç–æ–≤ ü§ñ \n\n
            –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –Ω–∞ –Ω–∞—à–µ–º –∫—É—Ä—Å–∞ "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –º–µ–¥–∏–∞". 
            –ú–Ω–µ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, –∞ –µ—â–µ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 
            –ø—Ä–æ –Ω–∞—à–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –≤–µ–±–∏–Ω–∞—Ä—ã —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –∫—É—Ä—Å–∞ üî•
            """)
        else:
            self.subscribers[chat_id] = User(chat_id, ["news"])

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        self.show_home_menu(chat_id)

    def home(self, message):
        chat_id = message.chat.id
        self.show_home_menu(chat_id)
    
    def show_home_menu(self, chat_id):
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        markup = types.InlineKeyboardMarkup()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã (–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ 'private')
        for group_id, group_name in self.groups.items():
            if not group_id.endswith("private"):
                markup.add(types.InlineKeyboardButton(text=f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {group_name}", callback_data=f"subscribe_{group_id}"))

        self.bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:", reply_markup=markup)

    def admin_login(self, message):
        chat_id = message.chat.id
        if chat_id in self.admins:
            self.bot.send_message(chat_id, "–í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        else:
            self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    def superadmin_login(self, message):
        chat_id = message.chat.id
        if chat_id in self.superadmins:
            self.bot.send_message(chat_id, "–í—ã —É–∂–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        elif chat_id in self.admins:
            self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")


    def enter_publish_mode(self, message):
        chat_id = message.chat.id
        if chat_id in self.admins:
            self.admins[chat_id].publish_mode = True
            self.bot.send_message(chat_id, "–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")
            
            self.reset_inactivity_timer(chat_id)
        else:
            self.bot.send_message(chat_id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")

    def exit_publish_mode(self, message):
        chat_id = message.chat.id
        if chat_id in self.admins and self.admins[chat_id].publish_mode:
            self.disable_publish_mode(chat_id)
            self.bot.send_message(chat_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        elif chat_id not in self.admins:
            self.bot.send_message(chat_id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        else:
            self.bot.send_message(chat_id, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

    def disable_publish_mode(self, chat_id):
        """Disable publish mode and cancel any existing timer."""
        if chat_id in self.admins and self.admins[chat_id].publish_mode:
            self.admins[chat_id].publish_mode = False
            self.admins[chat_id].pending_message = None
        if chat_id in self.timers:
            self.timers[chat_id].cancel()

    def reset_inactivity_timer(self, chat_id):
        """Reset the inactivity timer for the admin's publish mode."""
        if chat_id in self.timers:
            self.timers[chat_id].cancel()

        # Start a new timer
        timer = threading.Timer(self.publish_timeout, lambda: self.exit_publish_mode_due_to_inactivity(chat_id))
        self.timers[chat_id] = timer
        timer.start()

    def exit_publish_mode_due_to_inactivity(self, chat_id):
        """Exit publish mode after 15 minutes of inactivity."""
        if chat_id in self.admins and self.admins[chat_id].publish_mode:
            self.bot.send_message(chat_id, "–í—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è.")
            self.disable_publish_mode(chat_id)

    def create_group(self, message):
        chat_id = message.chat.id
        if chat_id in self.admins:
            # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å –∑–∞–ø—Ä–æ—Å–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã
            self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø—É–±–ª–∏—á–Ω–æ–µ –∏–º—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã. –ù–∞–ø—Ä–∏–º–µ—Ä, '–ù–æ–≤–æ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞':")
            self.bot.register_next_step_handler(message, self.get_group_name)
        else:
            self.bot.send_message(chat_id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")

    def get_group_name(self, message):
        chat_id = message.chat.id
        group_name = message.text.strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –≥—Ä—É–ø–ø—ã
        self.bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'news_group'):")
        self.bot.register_next_step_handler(message, self.get_group_id, group_name)

    def get_group_id(self, message, group_name):
        chat_id = message.chat.id
        group_id = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ID —á–µ—Ä–µ–∑ RegEx (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ)
        if not re.match(r"^[a-zA-Z0-9_]+$", group_id):
            self.bot.send_message(chat_id, "ID –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª –Ω–∏–∂–Ω–µ–≥–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (_). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            self.bot.register_next_step_handler(message, self.get_group_id, group_name)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞
            if group_id in self.groups:
                self.bot.send_message(chat_id, "–ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                self.bot.register_next_step_handler(message, self.get_group_id, group_name)
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                self.groups[group_id] = group_name
                self.bot.send_message(chat_id, f"–ì—Ä—É–ø–ø–∞ '{group_name}' —Å ID '{group_id}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
                link = f"https://t.me/{self.bot.get_me().username}?start={quote(group_id)}"
                self.bot.send_message(chat_id, f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É '{group_name}': {link}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –ª–∏ –≥—Ä—É–ø–ø–∞ (ID –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 'private')
                if group_id.endswith("private"):
                    self.bot.send_message(chat_id, f"–ì—Ä—É–ø–ø–∞ '{group_name}' —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∏ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
                else:
                    self.bot.send_message(chat_id, f"–ì—Ä—É–ø–ø–∞ '{group_name}' —è–≤–ª—è–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω–æ–π –∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

    def save_new_group(self, message):
        group_name = message.text
        chat_id = message.chat.id

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
        group_id = group_name.lower().replace(" ", "_")
        self.groups[group_id] = group_name
        self.bot.send_message(chat_id, f"–ì—Ä—É–ø–ø–∞ '{group_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
        link = f"https://t.me/{self.bot.get_me().username}?start={quote(group_id)}"
        self.bot.send_message(chat_id, f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É '{group_name}': {link}")


    def handle_subscription(self, call):
        chat_id = call.message.chat.id
        subscription_type = call.data.split("subscribe_")[1]
        
        if subscription_type in self.groups.keys():
            if subscription_type not in self.subscribers[chat_id].groups:
                self.subscribers[chat_id].groups.append(subscription_type)
                self.bot.send_message(chat_id, f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É {self.groups[subscription_type]}.")
            else:
                self.bot.send_message(chat_id, f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É {self.groups[subscription_type]}.")
 
    def handle_message(self, message):
        chat_id = message.chat.id
        text = message.text

        if chat_id in self.admins and self.admins[chat_id].publish_mode:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
            self.admins[chat_id].pending_message = text

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
            markup = types.InlineKeyboardMarkup()
            for group_id, group_name in self.groups.items():
                markup.add(types.InlineKeyboardButton(text=group_name, callback_data=f"select_group_{group_id}"))

            self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=markup)

        elif text == self.admin_password:
            self.admins[chat_id] = Admin(chat_id, self.admin_password)
            self.bot.send_message(chat_id, "–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç. –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /publish –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        elif text == self.superadmin_password and chat_id in self.admins:
            self.superadmins[chat_id] = SuperAdmin(chat_id)
            self.bot.send_message(chat_id, "–ü–∞—Ä–æ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç. –í—ã —Ç–µ–ø–µ—Ä—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
            self.notify_superadmins(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Å—Ç–∞–ª —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        elif chat_id in self.admins:
            self.bot.send_message(chat_id, "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /publish –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        else:
            self.bot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

    def notify_superadmins(self, message_text):
        for superadmin_id in self.superadmins:
            self.bot.send_message(superadmin_id, message_text)


    def handle_group_selection(self, call):
        chat_id = call.message.chat.id
        group_id = call.data.split("select_group_")[1]

        if chat_id in self.admins and self.admins[chat_id].publish_mode:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.admins[chat_id].pending_message_group = group_id
            group_name = self.groups[group_id]

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_send"),
                types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_message"),
                types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_message")
            )

            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            self.bot.send_message(chat_id, f"–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É '{group_name}'?\n\n{self.admins[chat_id].pending_message}", reply_markup=markup)

    

    def handle_confirmation(self, call):
        chat_id = call.message.chat.id
        action = call.data
        
        if chat_id in self.admins and self.admins[chat_id].publish_mode:
            if action == "confirm_send":
                message_text = self.admins[chat_id].pending_message

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è
                message_text += "\n\n–ñ–∏–≤—ã–µ –ü—Ä–æ–µ–∫—Ç—ã\n" \
                                "[Instagram](https://www.instagram.com/lifeprojectsru) | " \
                                "[Telegram](https://t.me/livingprojects)"
                
                group_id = self.admins[chat_id].pending_message_group

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
                for subscriber in self.subscribers.values():
                    if group_id in subscriber.groups or 'news' in subscriber.groups:
                        self.bot.send_message(subscriber.chat_id, message_text, parse_mode="Markdown")

                self.bot.send_message(chat_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")
                self.disable_publish_mode(chat_id)
                self.admins[chat_id].pending_message = None
            elif action == "edit_message":
                self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                self.reset_inactivity_timer(chat_id)  # Reset the timer on interaction
            elif action == "cancel_message":
                self.disable_publish_mode(chat_id)
                self.bot.send_message(chat_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    def request_consultation(self, message):
        chat_id = message.chat.id

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç –≤ —ç—Ç–æ–º –±–æ—Ç–µ!")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        self.bot.register_next_step_handler(message, self.save_consultation_request)

    def save_consultation_request(self, message, group_name=None):
        chat_id = message.chat.id
        description = message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if chat_id not in self.subscribers:
            self.subscribers[chat_id] = User(chat_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        if not hasattr(self.subscribers[chat_id], 'consultation_requests'):
            self.subscribers[chat_id].consultation_requests = []

        self.subscribers[chat_id].consultation_requests.append({
            'description': description,
            'timestamp': message.date,
            'group_names': [self.groups[group_name]] if group_name else []
        })

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_message = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {description}\n"
            f"–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {message.date}\n"
            f"–ì—Ä—É–ø–ø—ã: {', '.join(self.subscribers[chat_id].groups)}\n"
            f"–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é 'Reply' –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
        self.bot.send_message(self.group_chat_id, admin_message)

        self.bot.send_message(chat_id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

    def help_command(self, message):
        chat_id = message.chat.id

        if chat_id in self.superadmins:
            help_text = (
                "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
                "/superadmin - –í–æ–π—Ç–∏ –∫–∞–∫ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                "/admin - –í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                "/publish - –í–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
                "/stop - –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
                "/create_group - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            )
        elif chat_id in self.admins:
            help_text = (
                "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
                "/admin - –í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                "/publish - –í–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
                "/stop - –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
                "/create_group - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"

                "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                "/home - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/consultation - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            )
        else:
            help_text = (
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                "/home - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/consultation - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            )

        self.bot.send_message(chat_id, help_text)
    def run(self):
        self.bot.polling()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':

    # Load environment variables
    load_dotenv()
    TOKEN = os.environ.get("TELEGRAM_API_KEY") #'7448862042:AAEvAsZee2AzbzEwiW2Anw1DDoE4EU8044A'
    ADMIN_PASSWORD = os.environ.get("ADMIN_PASS") #'your_admin_password'
    SUPERADMIN_PASSWORD = os.environ.get("SUPER_ADMIN_PASS") #'your_superadmin_password'
    GROUP_CHAT_ID = os.environ.get("GROUP_CHAT_ID") #'-4515658282' 
    bot_manager = BotManager(TOKEN, ADMIN_PASSWORD, SUPERADMIN_PASSWORD, GROUP_CHAT_ID)
    bot_manager.run()

